Build a 4-digit BCD (binary-coded decimal) counter. Each decimal digit is encoded using 4 bits: q[3:0] is the ones digit, q[7:4] is the tens digit, etc. For digits [3:1], also output an enable signal indicating when each of the upper three digits should be incremented.

module top_module (
    input clk,
    input reset,  
    output [3:1] ena,
    output [15:0] q );

    assign ena[1] = (q[3:0] == 4'd9); 
    assign ena[2] = (q[7:4] == 4'd9) && ena[1]; 
    assign ena[3] = (q[11:8] == 4'd9) && ena[2]; 

    bcd_digit digit0 (.clk(clk), .reset(reset), .ena(1'b1),      .q(q[3:0]));    
    bcd_digit digit1 (.clk(clk), .reset(reset), .ena(ena[1]),    .q(q[7:4]));
    bcd_digit digit2 (.clk(clk), .reset(reset), .ena(ena[2]),    .q(q[11:8]));
    bcd_digit digit3 (.clk(clk), .reset(reset), .ena(ena[3]),    .q(q[15:12]));

endmodule

module bcd_digit (
    input clk,
    input reset,
    input ena,
    output reg [3:0] q );

    always @(posedge clk) begin
        if (reset)
            q <= 4'd0;
        else if (ena) begin
            if (q == 4'd9)
                q <= 4'd0;
            else
                q <= q + 1;
        end
    end
endmodule
